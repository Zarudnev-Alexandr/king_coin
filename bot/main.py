import asyncio
import json
import re

import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, Message
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram_dialog import DialogManager, StartMode, Dialog, Window, setup_dialogs
from aiogram_dialog.widgets.kbd import Group, WebApp
from aiogram_dialog.widgets.text import Format, Const
from environs import Env

from commands.quick_commands import check_args

env = Env()
env.read_env()

BOT_TOKEN = env('BOT_TOKEN')
API_URL = env('API_URL')

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


class StartSG(StatesGroup):
    start = State()


@dp.message(CommandStart(
    deep_link=True,
    magic=F.args.regexp(re.compile(r'ref_(\d+)'))
))
async def command_start_process(message: types.Message,
                                command: CommandObject):
    inviter_id = command.args.split("_")[1] if command.args else ''
    checked_inviter_id = await check_args(inviter_id, message.from_user.id)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=f'–ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å! üëë', web_app=types.WebAppInfo(
            url=f'https://king-coin.online:444?ref={int(checked_inviter_id) if checked_inviter_id != "0" else None}'))
    )
    builder.row(
        InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', url='https://t.me/kingcoin_com'),
    )
    builder.row(
        InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://kingcoin.tech/')
    )

    await message.answer(
        """
        –ü—Ä–∏–≤–µ—Ç, King!
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å—Ç–∞—Ç—å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –æ–±–µ–∑—å—è–Ω–æ–π –≤ –∫—Ä–∏–ø—Ç–æ-–¥–∂—É–Ω–≥–ª—è—Ö!üå¥
–ë—ã—Å—Ç—Ä–µ–µ –ø—Ä—ã–≥–∞–π –≤ —Å–∞–º–æ–ª—ë—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã. –°–æ–±–∏—Ä–∞–π –∞–∫—Ç–∏–≤—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Ä–∞–∑—É–º–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞–π—Ç–µ—Å—å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Ç–∏—Ç—É–ª King Coin.
–°–æ–±–∏—Ä–∞–π —Å–≤–æ—é —Å—Ç–∞—é, –ø—Ä–∏–≥–ª–∞—à–∞—è –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É - –º—ã —â–µ–¥—Ä–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–¥–∏–º —Ç–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞.
–ê —Ç–∞–∫ –∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ KingCoin –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Ä–∞–∑–¥–∞–µ—Ç 150 TON –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ –∏ –∑–∞ –µ—ë –ø—Ä–µ–¥–µ–ª–∞–º–∏.
–£–¥–∞—á–∏! –î–∂—É–Ω–≥–ª–∏ —Ç–µ–±—è –∑–æ–≤—É—Ç! 
        """,
        reply_markup=builder.as_markup()
    )


@dp.message(CommandStart())
async def command_start_no_referral(message: types.Message):

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å! üëë', web_app=types.WebAppInfo(url='https://king-coin.online:444/')),
    )
    builder.row(
        InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', url='https://t.me/kingcoin_com'),
    )
    builder.row(
        InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://kingcoin.tech/')
    )

    await message.answer(
        """
        –ü—Ä–∏–≤–µ—Ç, King!
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å—Ç–∞—Ç—å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –æ–±–µ–∑—å—è–Ω–æ–π –≤ –∫—Ä–∏–ø—Ç–æ-–¥–∂—É–Ω–≥–ª—è—Ö!üå¥
–ë—ã—Å—Ç—Ä–µ–µ –ø—Ä—ã–≥–∞–π –≤ —Å–∞–º–æ–ª—ë—Ç –∏ –Ω–∞—á–∏–Ω–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã. –°–æ–±–∏—Ä–∞–π –∞–∫—Ç–∏–≤—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Ä–∞–∑—É–º–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–∂–∞–π—Ç–µ—Å—å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –ø–æ–ª—É—á–∏ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Ç–∏—Ç—É–ª King Coin.
–°–æ–±–∏—Ä–∞–π —Å–≤–æ—é —Å—Ç–∞—é, –ø—Ä–∏–≥–ª–∞—à–∞—è –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –≤ –∏–≥—Ä—É - –º—ã —â–µ–¥—Ä–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–¥–∏–º —Ç–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞.
–ê —Ç–∞–∫ –∂–µ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ KingCoin –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Ä–∞–∑–¥–∞–µ—Ç 150 TON –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ –∏ –∑–∞ –µ—ë –ø—Ä–µ–¥–µ–ª–∞–º–∏.
–£–¥–∞—á–∏! –î–∂—É–Ω–≥–ª–∏ —Ç–µ–±—è –∑–æ–≤—É—Ç! 
        """,
        reply_markup=builder.as_markup()
    )


@dp.message(Command('daily'))
async def command_daily(message: types.Message):
    # URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞
    backend_url = "https://king-coin.online/api/users/daily_stats"

    # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
    tg_id = message.from_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(backend_url, params={"tg_id": tg_id}) as response:
                if response.status == 404:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                elif response.status == 403:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ API.")
                    return
                elif response.status != 200:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                data = await response.json()

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response_message = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                    f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['count_of_all_users']}\n"
                    f"üí∞ –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data['all_earned_money']}\n"
                    f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {data['users_registered_today']}"
                )
                await message.answer(response_message)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


# dp.include_router(start_dialog)
setup_dialogs(dp)


async def on_startup(bot):
    print('–±–æ—Ç –ø–æ–ª–µ—Ç–µ–ª')


async def on_shutdown(bot):
    print('–±–æ—Ç –ª–µ–≥')


dp.startup.register(on_startup)
dp.shutdown.register(on_shutdown)

# dp.update.middleware(DataBaseSession(session_pool=session_maker))
dp.callback_query.middleware(CallbackAnswerMiddleware())

dp.run_polling(bot)